// <auto-generated />
using System;
using FitGymApp.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitGymApp.Domain.Migrations
{
    [DbContext(typeof(FitGymAppContext))]
    [Migration("20250713202012_AddOneFieldGymPlanSelected")]
    partial class AddOneFieldGymPlanSelected
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitGymApp.Domain.Models.AccessMethodType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("AccessMethodType", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ammount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymId" }, "IX_FK_BillGym");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_BillUser");

                    b.HasIndex(new[] { "UserSellerId" }, "IX_FK_BillUser1");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_FK_BillUserType");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("BranchDailyBranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchDaily_BranchId");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessMethodId" }, "IX_FK_BranchAccessMethod");

                    b.HasIndex(new[] { "BranchDailyBranchId" }, "IX_FK_BranchDaily");

                    b.HasIndex(new[] { "GymId" }, "IX_FK_GymBranch");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.CategoryExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CategoryExercise", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Daily", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoutineExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoutineExerciseId" }, "IX_FK_RoutineExerciseDaily");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserDaily");

                    b.ToTable("Daily", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DailyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Repetitions")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DailyId" }, "IX_FK_DailyDailyExercise");

                    b.HasIndex(new[] { "ExerciseId" }, "IX_FK_ExerciseDailyExercise");

                    b.ToTable("DailyExercise", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyExerciseHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DailyHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Repetitions")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DailyHistoryId" }, "IX_FK_DailyHistoryDailyExerciseHistory");

                    b.ToTable("DailyExerciseHistory", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoutineExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_FK_BranchDailyHistory");

                    b.HasIndex(new[] { "RoutineExerciseId" }, "IX_FK_RoutineExerciseDailyHistory");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserDailyHistory");

                    b.ToTable("DailyHistory", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Diet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BreakFast")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MidAfternoon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MidMorning")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MidNight")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Night")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_DietUser");

                    b.ToTable("Diet", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeRegisterDaily", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EmployeeRegisterDaily", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EmployeeType", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Arl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ARL");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EmployeeTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeType_Id");

                    b.Property<DateTime?>("EndContract")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PensionFund")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartContract")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeTypeId" }, "IX_FK_EmployeeTypeEmployeeUser");

                    b.ToTable("EmployeeUser", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryExerciseId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryExercise_Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryExerciseId1" }, "IX_FK_CategoryExerciseExercise");

                    b.HasIndex(new[] { "CategoryExerciseId" }, "IX_FK_ExerciseDailyExerciseHistory");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.FitUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("FitUser", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Gym", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("GymPlanSelectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GymPlanSelectedId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GymTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NIT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GymPlanSelectedId1")
                        .IsUnique()
                        .HasFilter("[GymPlanSelectedId1] IS NOT NULL");

                    b.HasIndex("GymTypeId");

                    b.HasIndex(new[] { "GymPlanSelectedId" }, "IX_FK_GymGymPlanSelected");

                    b.ToTable("Gym", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelected", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymPlanSelectedTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GymPlanSelectedTypeId");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymPlanSelectedTypeId" }, "IX_FK_GymPlanSelectedTypeGymPlanSelected");

                    b.ToTable("GymPlanSelected", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelectedModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymPlanSelectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymPlanSelectedId" }, "IX_FK_GymPlanSelectedGymPlanSelectedModule");

                    b.ToTable("GymPlanSelectedModule", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelectedType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("UsdPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("GymPlanSelectedType", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GymTypes");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.JourneyEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EmployeeUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeUser_Id");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StartHour")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeUserId" }, "IX_FK_EmployeeUserJourneyEmployee");

                    b.ToTable("JourneyEmployee", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogChange", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PastObject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserLogChanges");

                    b.ToTable("LogChanges");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogError", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubModuleId" }, "IX_FK_SubModuleLogErrors");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserLogErrors");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserLogLogin");

                    b.ToTable("LogLogin", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogUninstall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UnnistallOptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UnnistallOptionsId" }, "IX_FK_UnnistallOptionsLogUnnistall");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserUnnistallLog");

                    b.ToTable("LogUninstall", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Brand_Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MachineCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MachineCategory_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BrandId" }, "IX_FK_BrandMachine");

                    b.HasIndex(new[] { "MachineCategoryId" }, "IX_FK_MachineCategoryMachine");

                    b.ToTable("Machine", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.MachineCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MachineCategory", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymPlanSelectedModuleModuleModuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GymPlanSelectedModuleModule_ModuleId");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("URL");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymPlanSelectedModuleModuleModuleId" }, "IX_FK_GymPlanSelectedModuleModule");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_FK_UserTypeModule");

                    b.ToTable("Module", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Opened")
                        .HasColumnType("bit");

                    b.Property<string>("Option1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ShowDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Urloption1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("URLOption1");

                    b.Property<string>("Urloption2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("URLOption2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserNotification");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.NotificationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("NotificationOptionNotificationNotificationOptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationOptionNotification_NotificationOptionId");

                    b.Property<string>("Push")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Sms")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SMS");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhatsaApp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NotificationOptionNotificationNotificationOptionId" }, "IX_FK_NotificationOptionNotification");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserNotificationOption");

                    b.ToTable("NotificationOption", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Create")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Delete")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Read")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("See")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Update")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserPermissions");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_FK_UserTypePermissions");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.PhysicalAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abdomen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Bmi")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("BMI");

                    b.Property<string>("BodyFatPercentage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Chest")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Hips")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LeftArm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LeftCalf")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LeftForearm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LeftThigh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LowerBack")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MuscleMass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Neck")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RighArm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RightCalf")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RightForearm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RightThigh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Shoulders")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpperBack")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Waist")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Wrist")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserPhysicalAssessment");

                    b.ToTable("PhysicalAssessment", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlanTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymId" }, "IX_FK_GymPlan");

                    b.HasIndex(new[] { "PlanTypeId" }, "IX_FK_PlanTypePlan");

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.PlanType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PlanType", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineAssigned", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserRoutineAssigned");

                    b.ToTable("RoutineAssigned", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Repetitions")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RoutineTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sets")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExerciseId" }, "IX_FK_ExerciseRoutineExercise");

                    b.HasIndex(new[] { "RoutineTemplateId" }, "IX_FK_RoutineRoutineExercise");

                    b.ToTable("RoutineExercise", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RoutineAssignedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutineUserRoutineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoutineUser_RoutineId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GymId" }, "IX_FK_GymRoutine");

                    b.HasIndex(new[] { "RoutineAssignedId" }, "IX_FK_RoutineAssignedRoutine");

                    b.HasIndex(new[] { "RoutineUserRoutineId" }, "IX_FK_RoutineUser");

                    b.ToTable("RoutineTemplate", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_FK_BranchSchedule");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.SubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "IX_FK_BranchSubModule");

                    b.HasIndex(new[] { "ModuleId" }, "IX_FK_ModuleSubModule");

                    b.ToTable("SubModule", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.UninstallOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("UninstallOptions");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmergencyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("EmployeeRegisterDailyUserUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeRegisterDailyUser_UserId");

                    b.Property<Guid?>("GymId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GymUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GymUser_Id");

                    b.Property<Guid?>("IdEps")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdEPS");

                    b.Property<Guid?>("IdGender")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhysicalExceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rh")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("RH");

                    b.Property<Guid?>("ScheduleUserUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleUser_UserId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserDietUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserDiet_UserId");

                    b.Property<Guid?>("UserEmployeeUserUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserEmployeeUser_UserId");

                    b.Property<Guid?>("UserFitUserUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserFitUser_UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex(new[] { "EmployeeRegisterDailyUserUserId" }, "IX_FK_EmployeeRegisterDailyUser");

                    b.HasIndex(new[] { "ScheduleUserUserId" }, "IX_FK_ScheduleUser");

                    b.HasIndex(new[] { "UserDietUserId" }, "IX_FK_UserDiet");

                    b.HasIndex(new[] { "UserEmployeeUserUserId" }, "IX_FK_UserEmployeeUser");

                    b.HasIndex(new[] { "UserFitUserUserId" }, "IX_FK_UserFitUser");

                    b.HasIndex(new[] { "GymUserId" }, "IX_FK_UserGymUser");

                    b.HasIndex(new[] { "PlanId" }, "IX_FK_UserPlan");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_FK_UserUserType");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("MachineExercise", b =>
                {
                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Machine_Id");

                    b.Property<Guid>("MachineExerciseMachineId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MachineExercise_Machine_Id");

                    b.HasKey("MachineId", "MachineExerciseMachineId");

                    b.HasIndex(new[] { "MachineExerciseMachineId" }, "IX_FK_MachineExercise_Exercise");

                    b.ToTable("MachineExercise", (string)null);
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Bill", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Gym", "Gym")
                        .WithMany("Bills")
                        .HasForeignKey("GymId")
                        .IsRequired()
                        .HasConstraintName("FK_BillGym");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("BillUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BillUser");

                    b.HasOne("FitGymApp.Domain.Models.User", "UserSeller")
                        .WithMany("BillUserSellers")
                        .HasForeignKey("UserSellerId")
                        .IsRequired()
                        .HasConstraintName("FK_BillUser1");

                    b.HasOne("FitGymApp.Domain.Models.UserType", "UserType")
                        .WithMany("Bills")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BillUserType");

                    b.Navigation("Gym");

                    b.Navigation("User");

                    b.Navigation("UserSeller");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Branch", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.AccessMethodType", "AccessMethod")
                        .WithMany("Branches")
                        .HasForeignKey("AccessMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchAccessMethod");

                    b.HasOne("FitGymApp.Domain.Models.Daily", "BranchDailyBranch")
                        .WithMany("Branches")
                        .HasForeignKey("BranchDailyBranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchDaily");

                    b.HasOne("FitGymApp.Domain.Models.Gym", "Gym")
                        .WithMany("Branches")
                        .HasForeignKey("GymId")
                        .IsRequired()
                        .HasConstraintName("FK_GymBranch");

                    b.Navigation("AccessMethod");

                    b.Navigation("BranchDailyBranch");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Daily", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.RoutineExercise", "RoutineExercise")
                        .WithMany("Dailies")
                        .HasForeignKey("RoutineExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineExerciseDaily");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("Dailies")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDaily");

                    b.Navigation("RoutineExercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyExercise", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Daily", "Daily")
                        .WithMany("DailyExercises")
                        .HasForeignKey("DailyId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyDailyExercise");

                    b.HasOne("FitGymApp.Domain.Models.Exercise", "Exercise")
                        .WithMany("DailyExercises")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_ExerciseDailyExercise");

                    b.Navigation("Daily");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyExerciseHistory", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.DailyHistory", "DailyHistory")
                        .WithMany("DailyExerciseHistories")
                        .HasForeignKey("DailyHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyHistoryDailyExerciseHistory");

                    b.Navigation("DailyHistory");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyHistory", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Branch", "Branch")
                        .WithMany("DailyHistories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchDailyHistory");

                    b.HasOne("FitGymApp.Domain.Models.RoutineExercise", "RoutineExercise")
                        .WithMany("DailyHistories")
                        .HasForeignKey("RoutineExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineExerciseDailyHistory");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("DailyHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDailyHistory");

                    b.Navigation("Branch");

                    b.Navigation("RoutineExercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Diet", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("Diets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DietUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeUser", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.EmployeeType", "EmployeeType")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("EmployeeTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeTypeEmployeeUser");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Exercise", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.DailyExerciseHistory", "CategoryExercise")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_ExerciseDailyExerciseHistory");

                    b.HasOne("FitGymApp.Domain.Models.CategoryExercise", "CategoryExerciseId1Navigation")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryExerciseId1")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryExerciseExercise");

                    b.Navigation("CategoryExercise");

                    b.Navigation("CategoryExerciseId1Navigation");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Gym", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.GymPlanSelected", "GymPlanSelected")
                        .WithMany("Gyms")
                        .HasForeignKey("GymPlanSelectedId")
                        .IsRequired()
                        .HasConstraintName("FK_GymGymPlanSelected");

                    b.HasOne("FitGymApp.Domain.Models.GymPlanSelected", null)
                        .WithOne("Gym")
                        .HasForeignKey("FitGymApp.Domain.Models.Gym", "GymPlanSelectedId1");

                    b.HasOne("FitGymApp.Domain.Models.GymType", "GymType")
                        .WithMany("Gyms")
                        .HasForeignKey("GymTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymPlanSelected");

                    b.Navigation("GymType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelected", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.GymPlanSelectedType", "GymPlanSelectedType")
                        .WithMany("GymPlanSelecteds")
                        .HasForeignKey("GymPlanSelectedTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GymPlanSelectedTypeGymPlanSelected");

                    b.Navigation("GymPlanSelectedType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelectedModule", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.GymPlanSelected", "GymPlanSelected")
                        .WithMany("GymPlanSelectedModules")
                        .HasForeignKey("GymPlanSelectedId")
                        .IsRequired()
                        .HasConstraintName("FK_GymPlanSelectedGymPlanSelectedModule");

                    b.Navigation("GymPlanSelected");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.JourneyEmployee", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.EmployeeUser", "EmployeeUser")
                        .WithMany("JourneyEmployees")
                        .HasForeignKey("EmployeeUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeUserJourneyEmployee");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogChange", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("LogChanges")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogChanges");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogError", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.SubModule", "SubModule")
                        .WithMany("LogErrors")
                        .HasForeignKey("SubModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_SubModuleLogErrors");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("LogErrors")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogErrors");

                    b.Navigation("SubModule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogLogin", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("LogLogins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogLogin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.LogUninstall", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.UninstallOption", "UnnistallOptions")
                        .WithMany("LogUninstalls")
                        .HasForeignKey("UnnistallOptionsId")
                        .IsRequired()
                        .HasConstraintName("FK_UnnistallOptionsLogUnnistall");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("LogUninstalls")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserUnnistallLog");

                    b.Navigation("UnnistallOptions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Machine", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Brand", "Brand")
                        .WithMany("Machines")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_BrandMachine");

                    b.HasOne("FitGymApp.Domain.Models.MachineCategory", "MachineCategory")
                        .WithMany("Machines")
                        .HasForeignKey("MachineCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_MachineCategoryMachine");

                    b.Navigation("Brand");

                    b.Navigation("MachineCategory");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Module", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.GymPlanSelectedModule", "GymPlanSelectedModuleModuleModule")
                        .WithMany("Modules")
                        .HasForeignKey("GymPlanSelectedModuleModuleModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_GymPlanSelectedModuleModule");

                    b.HasOne("FitGymApp.Domain.Models.UserType", "UserType")
                        .WithMany("Modules")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserTypeModule");

                    b.Navigation("GymPlanSelectedModuleModuleModule");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Notification", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.NotificationOption", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Notification", "NotificationOptionNotificationNotificationOption")
                        .WithMany("NotificationOptions")
                        .HasForeignKey("NotificationOptionNotificationNotificationOptionId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationOptionNotification");

                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("NotificationOptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotificationOption");

                    b.Navigation("NotificationOptionNotificationNotificationOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Permission", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPermissions");

                    b.HasOne("FitGymApp.Domain.Models.UserType", "UserType")
                        .WithMany("Permissions")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserTypePermissions");

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.PhysicalAssessment", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("PhysicalAssessments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserPhysicalAssessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Plan", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Gym", "Gym")
                        .WithMany("Plans")
                        .HasForeignKey("GymId")
                        .IsRequired()
                        .HasConstraintName("FK_GymPlan");

                    b.HasOne("FitGymApp.Domain.Models.PlanType", "PlanType")
                        .WithMany("Plans")
                        .HasForeignKey("PlanTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanTypePlan");

                    b.Navigation("Gym");

                    b.Navigation("PlanType");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineAssigned", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.User", "User")
                        .WithMany("RoutineAssigneds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoutineAssigned");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineExercise", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Exercise", "Exercise")
                        .WithMany("RoutineExercises")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK_ExerciseRoutineExercise");

                    b.HasOne("FitGymApp.Domain.Models.RoutineTemplate", "RoutineTemplate")
                        .WithMany("RoutineExercises")
                        .HasForeignKey("RoutineTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineRoutineExercise");

                    b.Navigation("Exercise");

                    b.Navigation("RoutineTemplate");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineTemplate", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Gym", "Gym")
                        .WithMany("RoutineTemplates")
                        .HasForeignKey("GymId")
                        .IsRequired()
                        .HasConstraintName("FK_GymRoutine");

                    b.HasOne("FitGymApp.Domain.Models.RoutineAssigned", "RoutineAssigned")
                        .WithMany("RoutineTemplates")
                        .HasForeignKey("RoutineAssignedId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineAssignedRoutine");

                    b.HasOne("FitGymApp.Domain.Models.User", "RoutineUserRoutine")
                        .WithMany("RoutineTemplates")
                        .HasForeignKey("RoutineUserRoutineId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineUser");

                    b.Navigation("Gym");

                    b.Navigation("RoutineAssigned");

                    b.Navigation("RoutineUserRoutine");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Schedule", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Branch", "Branch")
                        .WithMany("Schedules")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchSchedule");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.SubModule", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Branch", "Branch")
                        .WithMany("SubModules")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_BranchSubModule");

                    b.HasOne("FitGymApp.Domain.Models.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_ModuleSubModule");

                    b.Navigation("Branch");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.User", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.EmployeeRegisterDaily", "EmployeeRegisterDailyUserUser")
                        .WithMany("Users")
                        .HasForeignKey("EmployeeRegisterDailyUserUserId")
                        .HasConstraintName("FK_EmployeeRegisterDailyUser");

                    b.HasOne("FitGymApp.Domain.Models.Gym", "Gym")
                        .WithMany("UserGyms")
                        .HasForeignKey("GymId");

                    b.HasOne("FitGymApp.Domain.Models.Gym", "GymUser")
                        .WithMany("UserUserGymAssigneds")
                        .HasForeignKey("GymUserId")
                        .HasConstraintName("FK_UserGymUser");

                    b.HasOne("FitGymApp.Domain.Models.Plan", "Plan")
                        .WithMany("Users")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_UserPlan");

                    b.HasOne("FitGymApp.Domain.Models.Schedule", "ScheduleUserUser")
                        .WithMany("Users")
                        .HasForeignKey("ScheduleUserUserId")
                        .HasConstraintName("FK_ScheduleUser");

                    b.HasOne("FitGymApp.Domain.Models.Diet", "UserDietUser")
                        .WithMany("Users")
                        .HasForeignKey("UserDietUserId")
                        .HasConstraintName("FK_UserDiet");

                    b.HasOne("FitGymApp.Domain.Models.EmployeeUser", "UserEmployeeUserUser")
                        .WithMany("Users")
                        .HasForeignKey("UserEmployeeUserUserId")
                        .HasConstraintName("FK_UserEmployeeUser");

                    b.HasOne("FitGymApp.Domain.Models.FitUser", "UserFitUserUser")
                        .WithMany("Users")
                        .HasForeignKey("UserFitUserUserId")
                        .HasConstraintName("FK_UserFitUser");

                    b.HasOne("FitGymApp.Domain.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_UserUserType");

                    b.Navigation("EmployeeRegisterDailyUserUser");

                    b.Navigation("Gym");

                    b.Navigation("GymUser");

                    b.Navigation("Plan");

                    b.Navigation("ScheduleUserUser");

                    b.Navigation("UserDietUser");

                    b.Navigation("UserEmployeeUserUser");

                    b.Navigation("UserFitUserUser");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("MachineExercise", b =>
                {
                    b.HasOne("FitGymApp.Domain.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("MachineExerciseMachineId")
                        .IsRequired()
                        .HasConstraintName("FK_MachineExercise_Exercise");

                    b.HasOne("FitGymApp.Domain.Models.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .IsRequired()
                        .HasConstraintName("FK_MachineExercise_Machine");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.AccessMethodType", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Branch", b =>
                {
                    b.Navigation("DailyHistories");

                    b.Navigation("Schedules");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Brand", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.CategoryExercise", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Daily", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("DailyExercises");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyExerciseHistory", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.DailyHistory", b =>
                {
                    b.Navigation("DailyExerciseHistories");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Diet", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeRegisterDaily", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeType", b =>
                {
                    b.Navigation("EmployeeUsers");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.EmployeeUser", b =>
                {
                    b.Navigation("JourneyEmployees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Exercise", b =>
                {
                    b.Navigation("DailyExercises");

                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.FitUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Gym", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Branches");

                    b.Navigation("Plans");

                    b.Navigation("RoutineTemplates");

                    b.Navigation("UserGyms");

                    b.Navigation("UserUserGymAssigneds");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelected", b =>
                {
                    b.Navigation("Gym")
                        .IsRequired();

                    b.Navigation("GymPlanSelectedModules");

                    b.Navigation("Gyms");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelectedModule", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymPlanSelectedType", b =>
                {
                    b.Navigation("GymPlanSelecteds");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.GymType", b =>
                {
                    b.Navigation("Gyms");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.MachineCategory", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Module", b =>
                {
                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationOptions");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Plan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.PlanType", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineAssigned", b =>
                {
                    b.Navigation("RoutineTemplates");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineExercise", b =>
                {
                    b.Navigation("Dailies");

                    b.Navigation("DailyHistories");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.RoutineTemplate", b =>
                {
                    b.Navigation("RoutineExercises");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.Schedule", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.SubModule", b =>
                {
                    b.Navigation("LogErrors");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.UninstallOption", b =>
                {
                    b.Navigation("LogUninstalls");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.User", b =>
                {
                    b.Navigation("BillUserSellers");

                    b.Navigation("BillUsers");

                    b.Navigation("Dailies");

                    b.Navigation("DailyHistories");

                    b.Navigation("Diets");

                    b.Navigation("LogChanges");

                    b.Navigation("LogErrors");

                    b.Navigation("LogLogins");

                    b.Navigation("LogUninstalls");

                    b.Navigation("NotificationOptions");

                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("PhysicalAssessments");

                    b.Navigation("RoutineAssigneds");

                    b.Navigation("RoutineTemplates");
                });

            modelBuilder.Entity("FitGymApp.Domain.Models.UserType", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Modules");

                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
